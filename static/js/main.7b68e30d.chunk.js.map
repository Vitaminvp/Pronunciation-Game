{"version":3,"sources":["components/Button.js","constants/colors.js","components/Home.js","utils/index.js","components/CustomComponent.js","components/Word.js","components/DefaultComponent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","whiteSpace","ButtonComponent","name","url","onClick","classes","Button","className","defaultProps","history","withRouter","colors","black","silver","gray","grey","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","darkblue","mediumblue","darkgreen","darkcyan","deepskyblue","darkturquoise","mediumspringgreen","springgreen","cyan","midnightblue","dodgerblue","lightseagreen","forestgreen","seagreen","darkslategray","darkslategrey","limegreen","mediumseagreen","turquoise","royalblue","steelblue","darkslateblue","mediumturquoise","indigo","darkolivegreen","cadetblue","cornflowerblue","rebeccapurple","mediumaquamarine","dimgray","dimgrey","slateblue","olivedrab","slategray","slategrey","lightslategray","lightslategrey","mediumslateblue","lawngreen","chartreuse","aquamarine","skyblue","lightskyblue","blueviolet","darkred","darkmagenta","saddlebrown","darkseagreen","lightgreen","mediumpurple","darkviolet","palegreen","darkorchid","yellowgreen","sienna","brown","darkgray","darkgrey","lightblue","greenyellow","paleturquoise","lightsteelblue","powderblue","firebrick","darkgoldenrod","mediumorchid","rosybrown","darkkhaki","mediumvioletred","indianred","peru","chocolate","tan","lightgray","lightgrey","thistle","orchid","goldenrod","palevioletred","crimson","gainsboro","plum","burlywood","lightcyan","lavender","darksalmon","violet","palegoldenrod","lightcoral","khaki","aliceblue","honeydew","azure","sandybrown","wheat","beige","whitesmoke","mintcream","ghostwhite","salmon","antiquewhite","linen","lightgoldenrodyellow","oldlace","magenta","deeppink","orangered","tomato","hotpink","coral","darkorange","lightsalmon","orange","lightpink","pink","gold","peachpuff","navajowhite","moccasin","bisque","mistyrose","blanchedalmond","papayawhip","lavenderblush","seashell","cornsilk","lemonchiffon","floralwhite","snow","lightyellow","ivory","theme","flexGrow","alignItems","display","paper","spacing","textAlign","palette","text","secondary","dispatch","useContext","AppContext","handleClick","type","data","push","Grid","container","item","xs","Fragment","isZeroLength","str","length","isDark","colorName","words","hex","substring","parseInt","margin","width","placeHolder","React","useState","setWords","noValidate","autoComplete","TextField","id","label","multiline","rows","value","variant","onFocus","target","onChange","event","onBlur","allWords","toLowerCase","replace","split","filter","Boolean","reduce","acc","cur","Math","random","toString","substr","toUpperCase","justifyContent","flexWrap","got","textDecoration","animation","opacity","chip","word","backgroundColor","fontWeight","Word","pronounced","said","setSaid","state","useEffect","chipClasses","classNames","Chip","wrapper","setPronounced","handleResult","results","result","transcript","recognition","window","SpeechRecognition","continuous","interimResults","onresult","start","stop","Object","keys","map","key","app","bg","minHeight","flexDirection","fontSize","link","position","bottom","fontFamily","createContext","initialState","reducer","action","App","useReducer","webkitSpeechRecognition","console","log","Provider","exact","path","to","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b68e30d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    color: \"white\",\n    height: 48,\n    padding: \"0 30px\",\n    whiteSpace: \"nowrap\"\n  }\n});\n\nfunction ButtonComponent({ name, url, onClick }) {\n  const classes = useStyles();\n  const handleClick = () => onClick(url);\n  return (\n    <Button className={classes.root} onClick={handleClick}>\n      {name}\n    </Button>\n  );\n}\n\nButtonComponent.propTypes = {\n  classes: PropTypes.object,\n  name: PropTypes.string,\n  url: PropTypes.string,\n  history: PropTypes.object\n};\n\nButtonComponent.defaultProps = {\n  classes: {},\n  name: \"button\",\n  url: \"\",\n  history: {}\n};\n\nexport default withRouter(ButtonComponent);\n","const colors = {\n  black: \"#000000\",\n  silver: \"#C0C0C0\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  white: \"#FFFFFF\",\n  maroon: \"#800000\",\n  red: \"#FF0000\",\n  purple: \"#800080\",\n  fuchsia: \"#FF00FF\",\n  green: \"#008000\",\n  lime: \"#00FF00\",\n  olive: \"#808000\",\n  yellow: \"#FFFF00\",\n  navy: \"#000080\",\n  blue: \"#0000FF\",\n  teal: \"#008080\",\n  aqua: \"#00FFFF\",\n  darkblue: \"#00008B\",\n  mediumblue: \"#0000CD\",\n  darkgreen: \"#006400\",\n  darkcyan: \"#008B8B\",\n  deepskyblue: \"#00BFFF\",\n  darkturquoise: \"#00CED1\",\n  mediumspringgreen: \"#00FA9A\",\n  springgreen: \"#00FF7F\",\n  cyan: \"#00FFFF\",\n  midnightblue: \"#191970\",\n  dodgerblue: \"#1E90FF\",\n  lightseagreen: \"#20B2AA\",\n  forestgreen: \"#228B22\",\n  seagreen: \"#2E8B57\",\n  darkslategray: \"#2F4F4F\",\n  darkslategrey: \"#2F4F4F\",\n  limegreen: \"#32CD32\",\n  mediumseagreen: \"#3CB371\",\n  turquoise: \"#40E0D0\",\n  royalblue: \"#4169E1\",\n  steelblue: \"#4682B4\",\n  darkslateblue: \"#483D8B\",\n  mediumturquoise: \"#48D1CC\",\n  indigo: \"#4B0082\",\n  darkolivegreen: \"#556B2F\",\n  cadetblue: \"#5F9EA0\",\n  cornflowerblue: \"#6495ED\",\n  rebeccapurple: \"#663399\",\n  mediumaquamarine: \"#66CDAA\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  slateblue: \"#6A5ACD\",\n  olivedrab: \"#6B8E23\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  mediumslateblue: \"#7B68EE\",\n  lawngreen: \"#7CFC00\",\n  chartreuse: \"#7FFF00\",\n  aquamarine: \"#7FFFD4\",\n  skyblue: \"#87CEEB\",\n  lightskyblue: \"#87CEFA\",\n  blueviolet: \"#8A2BE2\",\n  darkred: \"#8B0000\",\n  darkmagenta: \"#8B008B\",\n  saddlebrown: \"#8B4513\",\n  darkseagreen: \"#8FBC8F\",\n  lightgreen: \"#90EE90\",\n  mediumpurple: \"#9370DB\",\n  darkviolet: \"#9400D3\",\n  palegreen: \"#98FB98\",\n  darkorchid: \"#9932CC\",\n  yellowgreen: \"#9ACD32\",\n  sienna: \"#A0522D\",\n  brown: \"#A52A2A\",\n  darkgray: \"#A9A9A9\",\n  darkgrey: \"#A9A9A9\",\n  lightblue: \"#ADD8E6\",\n  greenyellow: \"#ADFF2F\",\n  paleturquoise: \"#AFEEEE\",\n  lightsteelblue: \"#B0C4DE\",\n  powderblue: \"#B0E0E6\",\n  firebrick: \"#B22222\",\n  darkgoldenrod: \"#B8860B\",\n  mediumorchid: \"#BA55D3\",\n  rosybrown: \"#BC8F8F\",\n  darkkhaki: \"#BDB76B\",\n  mediumvioletred: \"#C71585\",\n  indianred: \"#CD5C5C\",\n  peru: \"#CD853F\",\n  chocolate: \"#D2691E\",\n  tan: \"#D2B48C\",\n  lightgray: \"#D3D3D3\",\n  lightgrey: \"#D3D3D3\",\n  thistle: \"#D8BFD8\",\n  orchid: \"#DA70D6\",\n  goldenrod: \"#DAA520\",\n  palevioletred: \"#DB7093\",\n  crimson: \"#DC143C\",\n  gainsboro: \"#DCDCDC\",\n  plum: \"#DDA0DD\",\n  burlywood: \"#DEB887\",\n  lightcyan: \"#E0FFFF\",\n  lavender: \"#E6E6FA\",\n  darksalmon: \"#E9967A\",\n  violet: \"#EE82EE\",\n  palegoldenrod: \"#EEE8AA\",\n  lightcoral: \"#F08080\",\n  khaki: \"#F0E68C\",\n  aliceblue: \"#F0F8FF\",\n  honeydew: \"#F0FFF0\",\n  azure: \"#F0FFFF\",\n  sandybrown: \"#F4A460\",\n  wheat: \"#F5DEB3\",\n  beige: \"#F5F5DC\",\n  whitesmoke: \"#F5F5F5\",\n  mintcream: \"#F5FFFA\",\n  ghostwhite: \"#F8F8FF\",\n  salmon: \"#FA8072\",\n  antiquewhite: \"#FAEBD7\",\n  linen: \"#FAF0E6\",\n  lightgoldenrodyellow: \"#FAFAD2\",\n  oldlace: \"#FDF5E6\",\n  magenta: \"#FF00FF\",\n  deeppink: \"#FF1493\",\n  orangered: \"#FF4500\",\n  tomato: \"#FF6347\",\n  hotpink: \"#FF69B4\",\n  coral: \"#FF7F50\",\n  darkorange: \"#FF8C00\",\n  lightsalmon: \"#FFA07A\",\n  orange: \"#FFA500\",\n  lightpink: \"#FFB6C1\",\n  pink: \"#FFC0CB\",\n  gold: \"#FFD700\",\n  peachpuff: \"#FFDAB9\",\n  navajowhite: \"#FFDEAD\",\n  moccasin: \"#FFE4B5\",\n  bisque: \"#FFE4C4\",\n  mistyrose: \"#FFE4E1\",\n  blanchedalmond: \"#FFEBCD\",\n  papayawhip: \"#FFEFD5\",\n  lavenderblush: \"#FFF0F5\",\n  seashell: \"#FFF5EE\",\n  cornsilk: \"#FFF8DC\",\n  lemonchiffon: \"#FFFACD\",\n  floralwhite: \"#FFFAF0\",\n  snow: \"#FFFAFA\",\n  lightyellow: \"#FFFFE0\",\n  ivory: \"#FFFFF0\"\n};\nexport default colors;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ButtonComponent from \"./Button\";\nimport { withRouter } from \"react-router\";\nimport { AppContext } from \"../App\";\nimport colors from \"../constants/colors\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nfunction Home({ history }) {\n  const classes = useStyles();\n  const { dispatch } = useContext(AppContext);\n  const handleClick = url => {\n    dispatch({ type: \"UPDATE_WORDS\", data: colors });\n    history.push(url);\n  };\n\n  function FormRow() {\n    return (\n      <React.Fragment>\n        <Grid item xs={6}>\n          <ButtonComponent\n            name=\"Use default worlds\"\n            url=\"/default\"\n            onClick={handleClick}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <ButtonComponent\n            name=\"Add custom words\"\n            url=\"/custom\"\n            onClick={handleClick}\n          />\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid container item xs={12} spacing={3}>\n          <FormRow />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default withRouter(Home);\n","export const isZeroLength = str => str.length === 0;\n\nexport const isDefined = value => value != null;\n\nexport const isDark = (colorName, words) => {\n  const hex = words[colorName].substring(1, 7);\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  return r * 0.299 + g * 0.587 + b * 0.114 < 120;\n};\n\nexport const randomColor = () =>\n  `#${Math.random()\n    .toString(16)\n    .substr(-6)}`.toUpperCase();\n","import React, { Fragment, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withRouter } from \"react-router\";\nimport ButtonComponent from \"./Button\";\nimport { isZeroLength, randomColor } from \"../utils/\";\nimport { AppContext } from \"../App\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: 320\n    }\n  }\n}));\n\nconst placeHolder = \"Paste here your words\";\n\nfunction CustomComponent({ history }) {\n  const classes = useStyles();\n  const [words, setWords] = React.useState(placeHolder);\n  const { dispatch } = useContext(AppContext);\n  const handleChange = event => {\n    setWords(event.target.value);\n  };\n  const handleFocus = ({ target: { value } }) => {\n    if (value === placeHolder) setWords(\"\");\n  };\n  const handleBlur = () => isZeroLength(words) && setWords(placeHolder);\n  const handleSubmit = () => {\n    if (isZeroLength(words) || words === placeHolder) return;\n    const allWords = words\n      .toLowerCase()\n      .replace(/(?:[^\\w]|_)+/gi, \" \")\n      .split(/\\s+/)\n      .filter(Boolean)\n      .reduce((acc, cur) => {\n        return { ...acc, [cur]: randomColor() };\n      }, {});\n    dispatch({ type: \"UPDATE_WORDS\", data: allWords });\n    history.push(\"/default\");\n  };\n  return (\n    <Fragment>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <div>\n          <TextField\n            id=\"outlined-multiline-static\"\n            label=\"Custom words\"\n            multiline\n            rows=\"6\"\n            value={words}\n            variant=\"outlined\"\n            onFocus={handleFocus}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          />\n        </div>\n        <br />\n        <ButtonComponent name=\"Start\" onClick={handleSubmit} />\n      </form>\n    </Fragment>\n  );\n}\n\nexport default withRouter(CustomComponent);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Chip from \"@material-ui/core/Chip\";\nimport classNames from \"classnames\";\nimport { isDark } from \"../utils\";\nimport { AppContext } from \"../App\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: \"2px\"\n    }\n  },\n  got: {\n    textDecoration: \"line-through\",\n    animation: \"jump 0.2s ease-in-out 2 alternate-reverse\",\n    opacity: \".1\"\n  },\n  chip: ({ word, words }) => ({\n    backgroundColor: words[word],\n    color: isDark(word, words) ? \"#f0e9e99c\" : \"#353131\",\n    fontWeight: \"500\",\n    boxShadow: \"0px 0px 3px 1px rgba(0,0,0,0.75)\"\n  })\n});\n\nexport default function Word({ word, pronounced }) {\n  const [said, setSaid] = useState(false);\n  const {\n    state: { allWords }\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    if (word === pronounced) setSaid(true);\n  }, [word, pronounced]);\n\n  const classes = useStyles({ word, words: allWords });\n  const chipClasses = classNames(classes.chip, { [classes.got]: said });\n\n  return (\n    <div className={classes.root}>\n      <Chip label={word} className={chipClasses} />\n    </div>\n  );\n}\n","import React, { Fragment, useEffect, useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { withRouter } from \"react-router\";\nimport Word from \"./Word\";\nimport ButtonComponent from \"./Button\";\nimport { AppContext } from \"../App\";\n\nconst useStyles = makeStyles({\n  wrapper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  }\n});\n\nfunction DefaultComponent({ history }) {\n  const {\n    state: { allWords },\n    dispatch\n  } = useContext(AppContext);\n  const [pronounced, setPronounced] = useState(\"\");\n  useEffect(() => {\n    const recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.onresult = handleResult;\n    recognition.start();\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  function handleResult({ results }) {\n    const words = results[results.length - 1][0].transcript;\n    let result = words.toLowerCase();\n    result = result.replace(/\\s/g, \"\");\n    if (result in allWords) {\n      dispatch({ type: \"UPDATE_BG\", data: allWords[result] });\n      return setPronounced(result);\n    }\n  }\n  const classes = useStyles();\n  const handleClick = () => history.push(\"/\");\n\n  return (\n    <Fragment>\n      <ButtonComponent name=\"Home\" url=\"/\" onClick={handleClick} />\n      <br />\n      <div className={classes.wrapper}>\n        {Object.keys(allWords).map(key => (\n          <Word word={key} pronounced={pronounced} key={key} />\n        ))}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default withRouter(DefaultComponent);\n","import React, { useReducer } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Home from \"./components/Home\";\nimport CustomComponent from \"./components/CustomComponent\";\nimport DefaultComponent from \"./components/DefaultComponent\";\nimport { isDefined } from \"./utils\";\nimport colors from \"./constants/colors\";\n\nconst useStyles = makeStyles({\n  app: {\n    textAlign: \"center\",\n    background: ({ bg }) => bg,\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    fontSize: \"calc(10px + 2vmin)\"\n  },\n  link: {\n    position: \"absolute\",\n    bottom: 20,\n    fontFamily: \"fantasy\",\n    textDecoration: \"none\",\n    color: \"#FE6B8B\",\n    fontSize: 12\n  }\n});\n\nexport const AppContext = React.createContext(null);\n\nconst initialState = {\n  allWords: colors,\n  bg: \"linear-gradient(45deg, #1e1e1e 30%, #282c34 90%)\"\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"UPDATE_WORDS\":\n      return {\n        ...state,\n        allWords: action.data\n      };\n    case \"UPDATE_BG\":\n      return {\n        ...state,\n        bg: action.data\n      };\n\n    default:\n      return initialState;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const classes = useStyles({ bg: state.bg });\n\n  window.SpeechRecognition =\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  if (!isDefined(window.SpeechRecognition))\n    return (\n      <div className={classes.app}>\n        <h2>Your browser doesn't support speech recognition</h2>\n      </div>\n    );\n  console.log({ state });\n  return (\n    <div className={classes.app}>\n      <Router>\n        <AppContext.Provider value={{ state, dispatch }}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/custom\">\n              <CustomComponent />\n            </Route>\n            <Route path=\"/default\">\n              <DefaultComponent />\n            </Route>\n            <Route path=\"*\">\n              <Home />\n            </Route>\n          </Switch>\n        </AppContext.Provider>\n        <Link className={classes.link} to=\"https://beginnerjavascript.com/\">\n          Inspired by Wes Bos\n        </Link>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}